#include<iostream>
#include<stdio.h>
struct Array 
{
    int A[20] ;
    int size  ;
    int length;

};

void Display(struct Array arr)
{
    int i ;
    std::cout<<"elements are\n" ;
    for(i= 0 ; i < arr.length ; i++)
    {
        std::cout<< arr.A[i]<<'\n' ;

    }
   

}
void Append(struct Array *arr , int x)
{
    if(arr->length < arr->size)
        arr->A[arr->length++] = x ;

}
void Insert(struct Array *arr , int index , int x )
{
    if(index >= 0 && index <= arr->length)
    {
        for(int i = arr->length ; i >  index ; i--)
            arr->A[i] = arr->A[i-1] ;
        arr->A[index] = x;
        arr->length++ ;    
    }
    
}
int Delete(struct Array *arr , int index)
{
    int x = 0 ;
    if(index >0 && index < arr->length)
    {
        x = arr->A[index] ;
        for(int i = index ; i < arr->length - 1 ; i++)
            arr->A[i] = arr->A[i+1] ;
        arr->length-- ;
        return x ;

    }
    return x ;
}
void swap(int *x , int *y)//function for the modification in the linear search 
{
    int temp = 0 ;
    temp = *y;
    *y = *x ;
    *x = temp ;
}
int linear_search(struct Array *arr , int key )//searching a element
{
    int i ;
    for (i = 0 ; i <arr->length ;i++)
    {
        if(key == arr->A[i])
        {
            swap (&arr->A[i] , &arr->A[0]) ;//modification is done in the two ways one is transposition and move to top
            return 0 ;
        }
           
    }
    return -1 ;


}
int Binary_Search(struct Array arr , int key)
{
    int l , mid , h ;
    l = 0 ;
    h = arr.length - 1 ;
    while(l<=h)
    {
        mid = (l+h)/2 ;
        if(key == arr.A[mid])
        {
            return mid ;
            std::cout<<"the key is present in the given array" ;
        }
            
        else if(key<arr.A[mid])
        {
            h = mid - 1 ;

        } 
        else 
            l = mid+ 1 ;  

    }
    return -1 ;
}
int RBin_search(int a[] , int l , int  h ,int key )//the tome takes by this search is in order of logn(the best case time is 1 and the worst case time is logn ) 
{
    if(l <=  h)
    {
        int mid = (l+h) / 2 ;
        if(key == a[mid])
            return mid ;
        else if (key < a[mid])
            return RBin_search(a , l , mid - 1 , key) ;
        else 
            return RBin_search(a , mid +1 , h , key) ;      
    }    
    else
    {
        return -1 ;//it maens that the element is not present in the array
    }

}
int max_entry( int a[] , int length  )
{
    int max = a[0] ;
    for(int i = 1 ; i < length  ; i++)
    {
        if(max < a[i])
            max = a[i] ;
    }
    return max ;
    

}
int Set_Element(struct Array *arr , int entry , int index)
{
    if(index >= 0 && index < arr->length)
        arr->A[index] = entry ;
        return arr->A[index] ;
}
int sum (int a[] , int length )
{
    int total = 0 ;
    
    for(int i = 0 ; i <length ; i++)
        total = a[i] + total ;
    return total  ;    
}
int Sum_Recur(int a[] , int n)
{
    int total ;
    if (n >= 0)
    {
        total = a[n]  + Sum_Recur(a , n - 1) ;

        
        
    }
    return total ;
    
}  
int Reverse(struct Array *arr  ) 
{
    int B[20] ;
    int i = 0 ;
    int j = 0 ;
    for(i = arr->length - 1 , j = 0 ; i>= 0 ; i-- , j++)
    {
        B[j] = arr->A[i] ;

    }
    for (i = 0 ; i <arr->length ; i++)
    {
        arr->A[i] = B[i] ;
        
    }
    return 0 ;    
 
} 
int Reverse_swap(struct Array *arr)
{
    int i ;
    int j ;
    int temp = 0 ;
    for( i = 0 , j = arr->length - 1 ; i < j ; i++ , j--  )
    {
        temp = arr->A[i] ;
        arr->A[i] = arr->A[j] ;
        arr->A[j] = temp ;


    }
    return 0 ;
}
int insert_element(struct Array *arr , int x )
{
    int i = arr->length -1;
    while (arr->A[i] > x) 
    {
        arr->A[i+1] = arr->A[i] ;
        i-- ;
    }
    arr->A[i+1] = x ;
    return 0 ;
}
int Check_Sort(int a[] , int length )
{
    int i ;
    for(i= 0 ; i <length -1 ; i++) 
    {
        if(a[i] > a[i-1])
        return false ;

    }
    return true ;
}
int Seperation(struct Array *arr )
{
    int i = 0;
    int j = arr->length ;
    while(i < j)
    {
        while(arr->A[i] < 0 )
        i++ ;
        while(arr->A[j] >= 0)
        j-- ; 
        if(i <= j)
            swap(&arr->A[i] , &arr->A[j] ) ;
    }
    return 0 ;

}
struct Array* merge_array(struct Array *arr , struct Array *arr2   )
{
    
    int i = 0 ;
    int j = 0 ;
    int k = 0 ;
    struct Array *arr3 = (struct Array *)malloc(sizeof(struct Array)) ;

    while(i < arr->length && j< arr2->length)
    {
        if(arr->A[i] < arr2->A[j])
            arr3->A[k++] = arr->A[i++] ;
        else
            arr3->A[k++] = arr2->A[j++] ;    
    }
    
    for( ; i <arr->length ; i++) 
        arr3->A[k++] = arr->A[i] ;
    for( ; j <arr->length ; j++) 
        arr3->A[k++] = arr2->A[j] ;  
    arr3->length = arr->length + arr2->length ;  
    arr3->size = 20 ; 
    return arr3 ;  

}
struct Array* Union_array(struct Array *arr , struct Array *arr2   )
{
    
    int i = 0 ;
    int j = 0 ;
    int k = 0 ;
    struct Array *arr5 = (struct Array *)malloc(sizeof(struct Array)) ;

    while(i < arr->length && j< arr2->length)
    {
        if(arr->A[i] < arr2->A[j])
            arr5->A[k++] = arr->A[i++] ;
        else if (arr2->A[j] < arr->A[i])
            arr5->A[k++] = arr2->A[j++] ; 
        else
        { 
            arr5->A[k++] = arr2->A[i++] ; 
            j++ ; 
        }             
    }
    
    for( ; i <arr->length ; i++) 
        arr5->A[k++] = arr->A[i] ;
    for( ; j <arr->length ; j++) 
        arr5->A[k++] = arr2->A[j] ;  
    arr5->length = k ;  
    arr5->size = 20 ; 
    return arr5 ;  

}

struct Array* subtraction_array(struct Array *arr , struct Array *arr2   )
{
    
    int i = 0 ;
    int j = 0 ;
    int k = 0 ;
    struct Array *arr4 = (struct Array *)malloc(sizeof(struct Array)) ;
    while(i < arr->length && j< arr2->length)
    {
        if(arr->A[i] == arr2->A[j])
        {
            i++ ;
            j++ ; 
        }
        else
        {
            arr4->A[k++] = arr->A[i++] ;
            j++ ;
        }
              
    }

    for( ; i <arr->length ; i++) 
        arr4->A[k++] = arr->A[i] ;
    
      
    arr4->length = k;  
    arr4->size = 20 ; 
    return arr4 ;  
}
int find_missing(struct Array arr )
{
    int H[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ;
    int j ;
    for(int i = 0 ; i < arr.length ; i++) 
    {
        H[arr.A[i]] ++ ;

    }
    for(j = 0 ; j < 20 ; j++ )
        std::cout<<'\n'<<H[j]<<'\n' ;
   
}
int Finding_Dupli(struct Array arr )
{
    int count =0 ;
    int i ;
    int j ;
    
    for (i = 0 ; i <= arr.length ; i++ )
    {

        if(arr.A[i] == arr.A[i+1])
        {
            j = i +1 ; 
            std::cout<<'\n'<<arr.A[i]<<'\n' ;
            count = count +1;
            while(arr.A[j] ==arr.A[i]) j++ ;
            i = j-1 ;
        }
        
        
    }
    std::cout<<"the number of duplicate elements are \n"<<count ;
    return 0 ;
}
int last_duplicate(int a[20])
{
    int i = 0;
    int lastduplicate ;
    int count = 0 ;
    for(i = 0 ; i <20 ; i++)
    {
        if(a[i] == a[i+1] && a[i] != lastduplicate)
        {
            
            std::cout<<'\n'<<a[i] ;
            lastduplicate = a[i] ;
        }
        
    }
    
    
}
int dupli_hashtable(int a[10])
{
    int H[20] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;
    int i ;
    for(i = 0; i <10; i++ ) 
    {
        if(a[i] == a[i+1])
            H[a[i]] ++ ;

    }
    for(i = 0 ; i <20 ; i++) 
        std::cout<<'\n'<<H[i] ;
    return  0;
}
int dupli_unsorted(int a[10])
{
    int i = 0;
    int j = 0 ;
    int count  ; 
    for(i = 0 ; i < 10 ; i++ )
    {
        count = 1 ;
        if(A[i] != -1)
        {
            for(j = i +1 ; j < 10 ; j++)
                {
                    if(A[i] == A[j])
                    {
                        count = count + 1;
                        A[j] = -1 ;
                        
                    }
                    
                }
            if(count >1)
            std::cout<<" the number " << A[i] <<" is repeted " << count << " times \n" ; 
        }
    }
}
int dupli_hash_unsorted(int A[10])
{
    int i ;
    int H[9] = {0,0,0,0,0,0,0,0,0} ;
    for(i = 0 ; i < 10 ; i++)
    {
        H[A[i]] ++ ;

    }
    for(int j = 0 ; j < 9 ; j++)
    {
        std::cout<< H[j] << '\n' ;
    }
}
int sum_k(int A[10] , int k ) 
{
    int i ;
    for(i = 0 ; i <10 ; i ++)
    {
        if(A[i] != -1)
        {
            for(int j = i +1 ; j <10 ; j ++)
            {
                if(A[i] + A[j] == k)
                {
                    std::cout<< "the pair with sum equal to k : "<< A[i] << "," << A[j] << '\n' ;
                    A[j] = -1 ;
                }
            }
        }
    }
}
int sum_k_hash(int A [10] , int k )
{
    int H[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ;
    for(int i = 0 ; i < 10 ; i++)
    {
        if(H[k - A[i]] != 0)
        {
            std::cout<<"the pair whose sum is k is found " <<A[i] << (k - A[i]) ;

        }
        H[A[i]] ++ ;    

    }
}


int main()
{
    struct Array arr = {{2 , 4 , 6 , 6  , 8 , 8, 11 , 11 ,11 , 13 , 14 , 16 , 16 , 17 , 17 , 17 , 17, 17} , 20 , 18} ;
    struct Array arr2 = {{2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ,10 , 12, 13 , 67 , 69} , 20 , 13} ;
    struct Array *arr3 ;
    struct Array *arr4 ;
    struct Array *arr5 ;

    
    int A[20] = { 3 , 6 , 8 , 8 , 10 , 12 , 15 , 15 , 15 , 20 } ;
    dupli_hashtable(A);
    

    //int r = Set_Element( &arr,  10 , 3  ) ;
    //int r =  sum (arr.A  , arr.length) ;
    //int r = Sum_Recur(arr.A , arr.length) ;
    //std::cout<<Reverse_swap(& arr ) <<'\n';
    //std::cout<<"the sum of all the elements of the array is : \n"<< r<<'\n' ;
    //std::cout<<"the change in the array is \n"<< r <<'\n' ;
    //std::cout<< "the inserted element is 6"<<insert_element(&arr , 6) ;


}
